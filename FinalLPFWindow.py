# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\LPFWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import numpy
from scipy import signal
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
import plotSpectrum
import pyqtgraph as pg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setStyleSheet("QWidget#centralwidget{\n"
                                 "background-color:    rgb(218, 232, 252)}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pg1 = pg.PlotWidget(self.centralwidget)
        self.pg1.setGeometry(QtCore.QRect(680, 10, 1230, 500))
        self.pg1.setObjectName("pg1")
        self.pg2 = pg.PlotWidget(self.centralwidget)
        self.pg2.setGeometry(QtCore.QRect(679, 520, 1231, 460))
        self.pg2.setObjectName("pg2")
        self.sample_count = QtWidgets.QTextEdit(self.centralwidget)
        self.sample_count.setGeometry(QtCore.QRect(310, 180, 111, 31))
        self.sample_count.setStyleSheet("")
        self.sample_count.setObjectName("sample_count")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 190, 71, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 280, 71, 16))
        self.label_2.setObjectName("label_2")
        self.textF1 = QtWidgets.QTextEdit(self.centralwidget)
        self.textF1.setGeometry(QtCore.QRect(100, 270, 111, 31))
        self.textF1.setStyleSheet("")
        self.textF1.setObjectName("textF1")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(230, 280, 71, 16))
        self.label_3.setObjectName("label_3")
        self.textF2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textF2.setGeometry(QtCore.QRect(310, 270, 111, 31))
        self.textF2.setStyleSheet("")
        self.textF2.setObjectName("textF2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(460, 280, 71, 16))
        self.label_4.setObjectName("label_4")
        self.textF3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textF3.setGeometry(QtCore.QRect(540, 270, 111, 31))
        self.textF3.setStyleSheet("")
        self.textF3.setObjectName("textF3")
        self.sliderR = QtWidgets.QSlider(self.centralwidget)
        self.sliderR.setGeometry(QtCore.QRect(220, 410, 22, 160))
        self.sliderR.setOrientation(QtCore.Qt.Vertical)
        self.sliderR.setObjectName("sliderR")
        self.sliderC = QtWidgets.QSlider(self.centralwidget)
        self.sliderC.setGeometry(QtCore.QRect(420, 410, 22, 160))
        self.sliderC.setOrientation(QtCore.Qt.Vertical)
        self.sliderC.setObjectName("sliderC")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(220, 580, 16, 16))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(420, 570, 21, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.r_value = QtWidgets.QLabel(self.centralwidget)
        self.r_value.setGeometry(QtCore.QRect(210, 390, 47, 13))
        self.r_value.setObjectName("r_value")
        self.c_value = QtWidgets.QLabel(self.centralwidget)
        self.c_value.setGeometry(QtCore.QRect(410, 390, 47, 13))
        self.c_value.setObjectName("c_value")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(40, 690, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(40, 790, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_fc = QtWidgets.QLabel(self.centralwidget)
        self.label_fc.setGeometry(QtCore.QRect(210, 680, 351, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_fc.setFont(font)
        self.label_fc.setObjectName("label_fc")
        self.label_fw = QtWidgets.QLabel(self.centralwidget)
        self.label_fw.setGeometry(QtCore.QRect(220, 780, 351, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_fw.setFont(font)
        self.label_fw.setObjectName("label_fw")
        self.lbFFT = QtWidgets.QLabel(self.centralwidget)
        self.lbFFT.setGeometry(QtCore.QRect(210, 30, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lbFFT.setFont(font)
        self.lbFFT.setStyleSheet("")
        self.lbFFT.setObjectName("lbFFT")
        self.btnStart = QtWidgets.QPushButton(self.centralwidget)
        self.btnStart.setGeometry(QtCore.QRect(180, 870, 81, 91))
        self.btnStart.setStyleSheet("border-radius:20px;\n"
                                    "background-color: rgb(255, 255, 255);\n"
                                    "border: 2px solid green;")
        self.btnStart.setObjectName("btnStart")
        self.btnStop = QtWidgets.QPushButton(self.centralwidget)
        self.btnStop.setGeometry(QtCore.QRect(380, 870, 81, 91))
        self.btnStop.setStyleSheet("border-radius:20px;\n"
                                   "background-color: rgb(255, 255, 255);\n"
                                   "border: 2px solid red;")
        self.btnStop.setObjectName("btnStop")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.lpf = LowPassFilter(self)
        self.setup_connections()

    def setup_connections(self):
        self.btnStart.clicked.connect(self.lpf.start_processing)
        # self.btnStop.clicked.connect(self.lpf.plot_signals)
        self.sliderR.valueChanged.connect(self.lpf.update_R)
        self.sliderR.setMinimum(500)
        self.sliderR.setMaximum(10000)
        # set the default value
        self.sliderR.setValue(1000)
        self.sliderC.valueChanged.connect(self.lpf.update_C)
        self.sliderC.setMinimum(1)
        self.sliderC.setMaximum(100)
        self.sliderC.setValue(1)

    def apply_filter(self):
        # Không cần tạo mới đối tượng LowPassFilter ở đây
        self.lpf.apply_filter()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Sample count"))
        self.label_2.setText(_translate("MainWindow", "Frequency 1"))
        self.label_3.setText(_translate("MainWindow", "Frequency 2"))
        self.label_4.setText(_translate("MainWindow", "Frequency 3"))
        self.label_5.setText(_translate("MainWindow", "R"))
        self.label_6.setText(_translate("MainWindow", "C"))
        self.r_value.setText(_translate("MainWindow", "r_value"))
        self.c_value.setText(_translate("MainWindow", "c_value"))
        self.label_9.setText(_translate("MainWindow", "CutOff Frequency: "))
        self.label_10.setText(_translate("MainWindow", "Frequency Warping: "))
        self.label_fc.setText(_translate("MainWindow", "TextLabel"))
        self.label_fw.setText(_translate("MainWindow", "TextLabel"))
        self.lbFFT.setText(_translate("MainWindow", "Low Pass Filter (LPF)"))
        self.btnStart.setText(_translate("MainWindow", "Start"))
        self.btnStop.setText(_translate("MainWindow", "Stop"))


class LowPassFilter(object):
    def __init__(self, ui):
        self.processing_started = False
        self.sample_count = 8192
        self.R = 1000
        self.C = 100e-9
        self.Ts = 1.0 / self.sample_count
        self.freq1 = 1000
        self.freq2 = 2000
        self.freq3 = 3000
        self.ui = ui

        self.input_signal = [0] * self.sample_count
        self.output_signal = [0] * self.sample_count

        self.t = np.arange(0, 1, self.Ts)

    def generate_input_signal(self):
        self.input_signal = np.sin(2 * np.pi * self.freq1 * self.t) + np.sin(
            2 * np.pi * self.freq2 * self.t) + np.sin(2 * np.pi * self.freq3 * self.t)

    def apply_filter(self):
        y = [0] * len(self.input_signal)
        K1 = (self.Ts / (self.Ts + 2 * self.R * self.C))
        K2 = (self.Ts / (self.Ts + 2 * self.R * self.C))
        K3 = ((self.Ts - 2 * self.R * self.C) /
              (self.Ts + 2 * self.R * self.C))

        for i in range(len(self.input_signal)):
            y[i] = (self.input_signal[i] * K1) + \
                (self.input_signal[i - 1] * K2) - (y[i - 1] * K3)
        self.output_signal = y

    def plot_output_signal(self):
        plt.subplot(3, 1, 1)
        plt.plot(self.t, self.output_signal)
        plt.xlabel('Time')
        plt.ylabel('Amplitude')

        plt.show()

    def plot_spectrum(self):
        n = len(self.output_signal)  # Length of the signal
        k = np.arange(n)
        print("From plot_spectrum: " + str(self.sample_count))
        T = n / self.sample_count
        frq = k / T  # Two-sided frequency range
        frq = frq[:int(n / 2)]  # One-sided frequency range

        # FFT computation and normalization
        Y = np.fft.fft(self.output_signal) / n
        Y = Y[:int(n / 2)]

        # plot spectrum to pg1
        self.ui.pg1.clear()
        self.ui.pg1.plot(frq, abs(Y), pen='b')

        # Set plot properties
        self.ui.pg1.setTitle('Spectrum')
        self.ui.pg1.setLabel('left', '|Y(freq)|')
        self.ui.pg1.setLabel('bottom', 'Frequency (Hz)')
        self.ui.pg1.showGrid(x=True, y=True)

    def plot_frequency_response(self):
        # Tính toán tần số cắt
        print(self.sample_count)
        fc = 1 / (2 * np.pi * self.R * self.C)
        self.Ts = 1.0 / self.sample_count
        # Tạo bộ lọc
        num, den = signal.butter(1, fc / (1.0 / (2 * self.Ts)),
                                 btype='low', analog=False)

        # Tính toán đáp ứng tần số
        w, h = signal.freqz(num, den, worN=self.sample_count)

        # Chuyển đổi tần số sang Hz
        freq = w * (1.0 / self.Ts) / (2 * np.pi)

        # use pg2 to plot frequency response
        self.ui.pg2.clear()
        self.ui.pg2.plot(freq, 20 * np.log10(abs(h)), pen='r')
        self.ui.pg2.setTitle('Frequency Response')
        self.ui.pg2.setLabel('left', 'Gain (dB)')
        self.ui.pg2.setLabel('bottom', 'Frequency (Hz)')
        self.ui.pg2.showGrid(x=True, y=True)

    def GetFrequency(self):
        return (1 / (2 * numpy.pi * self.R * self.C))

    def GetWarping(self):
        return (2 / self.Ts) * numpy.arctan(2 * numpy.pi * self.GetFrequency() * self.Ts / 2) / (2 * numpy.pi)

    def update_ui(self):
        self.plot_frequency_response()
        self.plot_spectrum()
        self.ui.label_fc.setText(str(self.GetFrequency()))
        self.ui.label_fw.setText(str(self.GetWarping()))

    def update_parameters_values_from_textboxes(self):
        self.sample_count = int(self.ui.sample_count.toPlainText())
        self.Ts = 1.0 / self.sample_count
        print("From update_parameters_values_from_textboxes: " + str(self.Ts))
        self.freq1 = int(self.ui.textF1.toPlainText())
        self.freq2 = int(self.ui.textF2.toPlainText())
        self.freq3 = int(self.ui.textF3.toPlainText())

    def update_parameters_values_for_sliders(self):
        self.ui.textF1.setText(str(self.freq1))
        self.ui.textF2.setText(str(self.freq2))
        self.ui.textF3.setText(str(self.freq3))
        self.ui.r_value.setText(str(self.R))
        self.ui.c_value.setText(str(self.C))

        # update fc and fw labels
        self.update_ui()

    def update_sliders(self):
        self.ui.sliderR.setValue(self.R)
        # Convert Farad to nanofarad
        self.ui.sliderC.setValue(int(self.C * 100e-9))

    def update_R(self):
        self.R = self.ui.sliderR.value()
        self.ui.r_value.setText(str(self.R))
        self.update_ui()

    def update_C(self):
        self.C = self.ui.sliderC.value() * 100e-9  # Convert nanofarad to Farad
        print(self.C)
        self.ui.c_value.setText(str(self.C))
        self.update_ui()

    def start_processing(self):
        if not self.processing_started:  # Check if processing should start
            self.processing_started = True
            self.update_parameters_values_from_textboxes()
            self.generate_input_signal()
            self.apply_filter()
            print("Sample count : " + str(self.sample_count))
            print("Frequency 1 : " + str(self.freq1))
            print("Frequency 2 : " + str(self.freq2))
            print("Frequency 3 : " + str(self.freq3))
            print("CutOff Frequency : " + str(self.GetFrequency()))
            print("Frequency Warping : " + str(self.GetWarping()))
            self.plot_frequency_response()
            self.plot_spectrum()
            self.update_parameters_values_for_sliders()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
