# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\FFTWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pyqtgraph as pg

from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from PyQt5.QtWidgets import QGraphicsView, QGraphicsScene, QGraphicsProxyWidget
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
# ... (Đoạn mã PyQt5 hiện tại)
import fft


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1183, 726)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textAm1 = QtWidgets.QTextEdit(self.centralwidget)
        self.textAm1.setGeometry(QtCore.QRect(120, 30, 71, 41))
        self.textAm1.setObjectName("textAm1")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 50, 111, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 100, 111, 16))
        self.label_2.setObjectName("label_2")
        self.textAm2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textAm2.setGeometry(QtCore.QRect(120, 80, 71, 41))
        self.textAm2.setObjectName("textAm2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(220, 50, 111, 16))
        self.label_3.setObjectName("label_3")
        self.textF1 = QtWidgets.QTextEdit(self.centralwidget)
        self.textF1.setGeometry(QtCore.QRect(330, 30, 121, 41))
        self.textF1.setObjectName("textF1")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(220, 100, 111, 16))
        self.label_4.setObjectName("label_4")
        self.textF2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textF2.setGeometry(QtCore.QRect(330, 80, 121, 41))
        self.textF2.setObjectName("textF2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(480, 30, 101, 91))
        self.pushButton.setObjectName("pushButton")
        self.btnStart = QtWidgets.QPushButton(self.centralwidget)

        self.btnStart.setGeometry(QtCore.QRect(870, 30, 81, 91))
        self.btnStart.setObjectName("btnStart")
        self.mixAudio = pg.PlotWidget(self.centralwidget)
        self.mixAudio.setGeometry(QtCore.QRect(20, 190, 1131, 151))
        self.mixAudio.setObjectName("mixAudio")
        self.Filtered = pg.PlotWidget(self.centralwidget)
        self.Filtered.setGeometry(QtCore.QRect(20, 350, 1131, 161))
        self.Filtered.setObjectName("Filtered")
        self.Frequency = pg.PlotWidget(self.centralwidget)
        self.Frequency.setGeometry(QtCore.QRect(20, 520, 1131, 151))
        self.Frequency.setObjectName("Frequency")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(630, 70, 160, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.btnStop = QtWidgets.QPushButton(self.centralwidget)
        self.btnStop.setGeometry(QtCore.QRect(980, 30, 81, 91))
        self.btnStop.setObjectName("btnStop")
        # Connect button to function
        # self.btnStop.clicked.connect(self.on_click_stop)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(680, 30, 47, 13))
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1183, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.fft_processor = FFTProcessor(self)
        self.threshold = 100

        self.setup_connections()

    def setup_connections(self):
        # self.fft_processor.setup_connections()
        self.btnStart.clicked.connect(
            self.fft_processor.update_parameters_from_ui)
        self.btnStart.clicked.connect(self.fft_processor.start_processing)
        self.horizontalSlider.valueChanged.connect(
            self.fft_processor.update_threshold)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Amplitude of signal 1"))
        self.label_2.setText(_translate("MainWindow", "Amplitude of signal 2"))
        self.label_3.setText(_translate("MainWindow", "Frequency of signal 1"))
        self.label_4.setText(_translate("MainWindow", "Frequency of signal 2"))
        self.pushButton.setText(_translate("MainWindow", "Create Noise"))
        self.btnStart.setText(_translate("MainWindow", "Start"))
        self.btnStop.setText(_translate("MainWindow", "Stop"))
        self.label_5.setText(_translate("MainWindow", "PSD Value"))


# ... (Phần import và các định nghĩa khác)

class FFTProcessor:
    def __init__(self, ui):
        self.ui = ui
        self.amplitude_1 = 0.0
        self.amplitude_2 = 0.0
        self.frequency_1 = 0.0
        self.frequency_2 = 0.0
        self.noise_coefficient = 2.5
        self.threshold = 100

        self.t = np.arange(0, 1, fft.dt)
        self.f, self.f_clean = fft.generate_signal(self.t, self.amplitude_1, self.frequency_1,
                                                   self.amplitude_2, self.frequency_2, self.noise_coefficient)

        # Set default values from UI
        # self.update_parameters_from_ui()

    def update_parameters_from_ui(self):
        self.amplitude_1 = float(self.ui.textAm1.toPlainText())
        self.amplitude_2 = float(self.ui.textAm2.toPlainText())
        self.frequency_1 = float(self.ui.textF1.toPlainText())
        self.frequency_2 = float(self.ui.textF2.toPlainText())

    def update_plot(self):
        self.f, self.f_clean = fft.generate_signal(self.t, self.amplitude_1, self.frequency_1,
                                                   self.amplitude_2, self.frequency_2, self.noise_coefficient)
        fhat, PSD, freq, L = fft.compute_fft(self.t, self.f)
        fhat, PSDclean = fft.filter_noise(fhat, PSD, self.threshold)
        ffilt = fft.inverse_fft(fhat)

        self.ui.mixAudio.clear()
        # Plot clean signal as green
        self.ui.mixAudio.plot(self.t, self.f_clean,
                              pen='g', name='Clean Signal')
        # Plot noisy signal as blue
        self.ui.mixAudio.plot(self.t, self.f, pen='b', name='Noisy Signal')
        # Plot filtered signal as red
        self.ui.mixAudio.plot(self.t, np.real(
            ffilt), pen='r', name='Filtered Signal')
        self.ui.mixAudio.setTitle(
            'Comparison of Clean, Noisy, and Filtered Signals')

        self.ui.Filtered.clear()
        self.ui.Filtered.plot(self.t, np.real(ffilt))
        self.ui.Filtered.setTitle('Filtered Signal')

        self.ui.Frequency.clear()
        # Use red color for real part
        self.ui.Frequency.plot(freq[L], np.real(PSD[L]), pen='r')
        self.ui.Frequency.setTitle('Frequency Coefficients')

    def start_processing(self):
        self.update_plot()

    def update_threshold(self, value):
        self.threshold = value
        # update threshold value from slider
        self.ui.label_5.setText("PSD Value: {}".format(value))
        self.update_plot()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
